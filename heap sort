#include <iostream>
#include <vector>

using namespace std;

// Function to heapify a subtree rooted at index 'index'
void heapify(vector<int>& arr, int n, int index) {
    int largest = index; // Initialize largest as root
    int left = 2 * index + 1; // left child
    int right = 2 * index + 2; // right child

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    // If right child is larger than largest so far
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // If largest is not root
    if (largest != index) {
        swap(arr[index], arr[largest]);

        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}

// Main function to perform heap sort
void heapSort(vector<int>& arr) {
    int n = arr.size();

    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // One by one extract an element from heap
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        swap(arr[0], arr[i]);

        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

// Function to display the elements of an array
void displayArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

int main() {
    // Input array
    vector<int> arr = {12, 11, 13, 5, 6, 7};

    cout << "Original Array: ";
    displayArray(arr);

    // Sort the array in descending order using heap sort
    heapSort(arr);

    cout << "Array sorted in descending order: ";
    displayArray(arr);

    return 0;
}
